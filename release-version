#!/bin/bash

# exit on errors
set -e

# semver version to release
VERSION=$1

# test cli param and print usage information
if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  printf "Upgrade node.js version and release new images.\n"
  printf "Usage: $(basename "$0") <SEMVER_VERSION>\n"
  printf "Example: $(basename "$0") 8.11.2\n"
  exit 1
fi

# change to script directory
cd "$(dirname "$0")"

# test if git is available
command -v git >/dev/null 2>&1 || { printf >&2 "git is required but not available.\nAborting.\n"; exit 1; }

# test if current branch is master
CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
if [[ "$CURRENT_BRANCH" != "master" ]]; then
  printf "Your current git branch should be master but is $CURRENT_BRANCH.\nAborting.\n"
  exit 1
fi

# test if working tree is clean
if REPO_STATUS=$(git status --untracked-files=no --porcelain) && [ ! -z "$REPO_STATUS" ]; then
  printf "Your git repository seems to have uncommitted changes.\nAborting.\n"
  exit 1
fi

# extract major and minor parts from version for confirmation message
VERSION_MAJOR=`echo "$VERSION" | sed -E 's/^([0-9]+).+$/\1/'`
VERSION_MINOR=`echo "$VERSION" | sed -E 's/^([0-9]+\.[0-9]+).+$/\1/'`

# confirm actions
printf "This script will update all dockerfiles in this repository to node.js version $VERSION.\n"
printf "Changes will be committed, tagged with $VERSION and pushed to GitHub.\n"
printf "This push should trigger GitHub Actions, where images will be built and released to Docker Hub tagged with $VERSION_MAJOR, $VERSION_MINOR and $VERSION.\n"
printf "Press [ENTER] to continue or anything else to cancel."
IFS= read -s -n 1 key
echo ""
if [[ $key != "" ]]; then
  printf "Cancelled.\n"
  exit 1
fi
echo ""

# message for committing and tagging
MESSAGE="node.js v$VERSION"

# files list
declare -a FILES=(
  "Dockerfile"
  "Dockerfile-slim"
  "Dockerfile-gyp"
  "Dockerfile-alpine"
)

# change files and add changes to git
for FILE in "${FILES[@]}"; do
  sed -i '' -E 's/^(FROM[[:space:]]+)(node:)([0-9]+\.[0-9]+\.[0-9]+)/\1\2'$VERSION'/' $FILE
  git add $FILE
done

# commit changes
git commit -m "$MESSAGE"

# remove tag if existing locally and remote, then add new tag
set +e
git tag -d $VERSION >/dev/null 2>&1
git push origin :refs/tags/$VERSION >/dev/null 2>&1
git push --delete origin $VERSION >/dev/null 2>&1
set -e
git tag -a $VERSION -m "$MESSAGE"

# push changes and tags
git push --tags origin master

# print success message
printf "\nAll done.\n"
printf "See GitHub Actions for CI details: https://github.com/simbo/docker-node/actions\n"
printf "See Docker Hub for released images: https://hub.docker.com/r/simbo/node/tags\n"
exit 0
